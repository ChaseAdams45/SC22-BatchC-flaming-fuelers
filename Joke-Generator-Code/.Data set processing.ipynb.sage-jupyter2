{"backend_state":"running","connection_file":"/projects/aebc210b-e912-4df7-91ea-37e0f8451ece/.local/share/jupyter/runtime/kernel-0466c998-c7ba-47ca-b1e1-f0300096ecd5.json","kernel":"nlp_env","kernel_error":"","kernel_state":"busy","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":13,"id":"df8578","input":"from aitextgen import aitextgen\nfrom aitextgen.TokenDataset import TokenDataset\nfrom aitextgen.tokenizers import train_tokenizer\nfrom aitextgen.utils import GPT2ConfigCPU\nimport nltk\nnltk.download('wordnet')\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nimport urllib\nimport bs4 as bs\nimport re\nfrom nltk.tokenize import word_tokenize\n\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\n#jokes file from the rating jokes dataset:\ngeneric_joke_file = \"jokes.csv\"\n#dad jokes file:\ndad_joke_file = \"reddit_dadjokes.csv\"\n#currently only has the text for the bar jokes\nbar_joke_url = \t\"https://www.grammarbook.com/blog/definitions/walks-into-a-bar/\"\n\npunc = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nsource = urllib.request.urlopen(bar_joke_url).read()\nsoup = bs.BeautifulSoup(source,\"html.parser\")\n\n#all of the data would be a string so it can go in the list below\ngeneric_joke_text = \"\"\nbar_joke_text = \"\"\ndad_joke_text = \"\"\njoke_type = [generic_joke_text,dad_joke_text,bar_joke_text]\n\n\nfor i in range(len(joke_type)):\n    for paragraph in soup.find_all('p'):\n        joke_type[i] += paragraph.text\n        joke_type[i] = re.sub(r'\\[[0-9]*\\]',' ',joke_type[i])\n        joke_type[i] = joke_type[i].lower()\n        joke_type[i] = re.sub(r'\\W^.?!',' ',joke_type[i])\n        joke_type[i] = re.sub(r'\\d',' ',joke_type[i])\n        joke_type[i] = re.sub(r'\\s+',' ',joke_type[i])\n\n#just putting this here so we can control which set is used - this is temporary\nchosen_type = input(\"What type of joke would you like to generate?\")\nchosen_type = chosen_type.lower()\n\n\n\ntokens = word_tokenize(joke_type[0])\n\nprint(joke_type[1][:100])\n\n","kernel":"nlp_env","output":{"0":{"name":"stderr","text":"[nltk_data] Downloading package wordnet to /projects/aebc210b-e912-4df\n[nltk_data]     7-91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package punkt to /projects/aebc210b-e912-4df7-\n[nltk_data]     91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package averaged_perceptron_tagger to /project\n[nltk_data]     s/aebc210b-e912-4df7-91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n[nltk_data] Downloading package stopwords to /projects/aebc210b-e912-4\n[nltk_data]     df7-91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n"},"1":{"name":"input","opts":{"password":false,"prompt":"What type of joke would you like to generate?"}}},"pos":0,"start":1658523355455,"state":"busy","type":"cell"}
{"id":"2fc389","input":"","pos":2,"type":"cell"}
{"id":"5a3175","input":"","pos":1,"type":"cell"}
{"id":0,"time":1658521856612,"type":"user"}
{"last_load":1658438507218,"type":"file"}
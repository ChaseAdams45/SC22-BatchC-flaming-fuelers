{"backend_state":"init","connection_file":"/projects/aebc210b-e912-4df7-91ea-37e0f8451ece/.local/share/jupyter/runtime/kernel-91d8f1f3-bf8b-48d2-ad5c-740779357f39.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"interpreter":{"hash":"335ee12212264728feb72f243af72c5a8ea26c832f07e1f651ce9e17c7ceae23"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"03c291","input":"# reFetching the data\nlame_text = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    lame_text += paragraph.text","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"111be1","input":"# print the tokenized list of lists\nprint(tokenized)","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"18441c","input":"similar1, similar2","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1d36d8","input":"# Look up the most similar words to certain words in your text using the model.wv.most_similar() function","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3ea578","input":"'''\nDoing the same without removing stop words or lemming\n'''\n# tokenize the text using sent_tokenize\n\n# from this list of sentences, create a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence (after preprocessing)","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4303d3","input":"### Finding the most similar words in the model but... you get the idea ###\n\n","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4b7cc5","input":"#print the first 10 most common words.","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"542edd","input":"# Training the Word2Vec model (same code as before), but one change: use our lame data that was not preprocessed\n\n# Try printing this after training the model.\nwords = model.wv.index_to_key\nprint(words[:10])","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"568ab5","input":"    ### Finding the most similar words in the model ###\n","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"593f63","input":"","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"711910","input":"''' Training the Word2Vec model. You should pass:\n1. a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence\n2. min_count=1 --> Ignores all words with total frequency lower than 1 (i.e., include everything).\n'''\n# create the model\n\n# get the most common words of the model (it's entire vocabulary)\nmost_common_words = model.wv.index_to_key\n\n# save the model to use it later\n\n# model = Word2Vec.load(\"word2vec.model\")","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8fb8bd","input":"from aitextgen import aitextgen\nfrom aitextgen.TokenDataset import TokenDataset\nfrom aitextgen.tokenizers import train_tokenizer\nfrom aitextgen.utils import GPT2ConfigCPU\nimport nltk\nnltk.download('wordnet')\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nimport urllib\nimport bs4 as bs\nimport re\nfrom nltk.tokenize import word_tokenize\n\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\n#jokes file from the rating jokes dataset:\ngeneric_joke_file = \"jokes.csv\"\n#dad jokes file:\ndad_joke_file = \"reddit_dadjokes.csv\"\n#currently only has the text for the bar jokes\nbar_joke_url = \t\"https://www.grammarbook.com/blog/definitions/walks-into-a-bar/\"\n\npunc = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nsource = urllib.request.urlopen(bar_joke_url).read()\nsoup = bs.BeautifulSoup(source,\"html.parser\")\n\n#all of the data would be a string so it can go in the list below\ngeneric_joke_text = \"\"\nbar_joke_text = \"\"\ndad_joke_text = \"\"\njoke_type = [generic_joke_text,dad_joke_text,bar_joke_text]\n\n\nfor i in range(len(joke_type)):\n    for paragraph in soup.find_all('p'):\n        joke_type[i] += paragraph.text\n        joke_type[i] = re.sub(r'\\[[0-9]*\\]',' ',joke_type[i])\n        joke_type[i] = joke_type[i].lower()\n        joke_type[i] = re.sub(r'\\W^.?!',' ',joke_type[i])\n        joke_type[i] = re.sub(r'\\d',' ',joke_type[i])\n        joke_type[i] = re.sub(r'\\s+',' ',joke_type[i])\n\n#just putting this here so we can control which set is used - this is temporary\nchosen_type = input(\"What type of joke would you like to generate?\") #frontend would prob create a dropdown menu tho so idk how that would work\nchosen_type = chosen_type.lower()\n\n\n\ntokens = word_tokenize(joke_type[0])\n\nsentences\n\nprint(joke_type[1][:100])\n\n\n\n\n\n\n#def remove_stopwords(sentences):\n#    stop_words = set(stopwords.words('english'))\n#    for i in range(len(sentences)):\n#        words = nltk.word_tokenize(sentences[i])\n#        words = [word for word in words if not word.lower() in stop_words]\n#       sentences[i] = \" \".join(words)\n#    return sentences\n\n#def remove_punctuation(sentences):\n    \n    ### Some code goes here. Hint: Try looking up how to remove stopwords in NLTK if you get stuck. ###\n#    for i in range(len(sentences)):\n#        words = nltk.word_tokenize(sentences[i])\n#        words = [word for word in words if word not in \",.?!()\"]\n#        sentences[i] = ' '.join(words)\n#    return sentences\n#sentences = remove_punctuation(sentences)\n#print(sentences[:10]) #eliminating all punctuation.\n\n#def lem_sentences(sentences):\n#    for i in range(len(sentences)):\n#        words = nltk.word_tokenize(sentences[i])\n#       for w in words:\n#            words = lemmatizer.lemmatize(w)\n#        sentences[i] = \"\".join(words)\n#    return sentences\n#sentences = lem_sentences(sentences)\n#print(sentences[:10]) ","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8fc1cf","input":"","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bfed29","input":"# code to print a wordcloud for your sentences\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50, \n                        random_state=42\n                        ).generate(str(sentences))\nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c50afb","input":"# Finding a vector of a word, but badly","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c87d8a","input":"# Redo the word cloud but set stopwords to empty so it looks really bad\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50, \n                        random_state=42, ###SET STOPWORDS = [] and/or include_numbers = True or you will get the same thing!!!\n                        stopwords = [],\n                        include_numbers = True).generate(str(lame_sentences)) \nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c954bc","input":"    # Finding Word Vectors - print word vectors for certain words in your text\n","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"deff8d","input":"","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e30c6b","input":"","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":557,"id":"1d312f","input":"# Install NLTK - pip install nltk\nimport nltk\nnltk.download('wordnet')\nnltk.download('punkt')","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package wordnet to /projects/aebc210b-e912-4df\n[nltk_data]     7-91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package punkt to /projects/aebc210b-e912-4df7-\n[nltk_data]     91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":557,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":558,"id":"462748","input":"import urllib\nimport bs4 as bs\nimport re","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":559,"id":"cdccc4","input":"# We will read the contents of the Wikipedia article \"Global_warming\" as an example, please feel free to use your own! You can use the url below:\nurl = 'https://en.wikipedia.org/wiki/Global_warming' # you can change this to use other sites as well.\n\n# We can open the page using \"urllib.request.urlopen\" then read it using \".read()\"\nsource = urllib.request.urlopen(url).read()\n\n# Beautiful Soup is a Python library for pulling data out of HTML and XML files.\n# you may need to install a parser library --> \"!pip3 install lxml\"\n# Parsing the data/creating BeautifulSoup object\n\nsoup = bs.BeautifulSoup(source,\"html.parser\") \n\n# Fetching the data\ntext = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    text += paragraph.text\n\n# Preprocessing the data\n\ntext = re.sub(r'\\[[0-9]*\\]',' ',text) # [0-9]* --> Matches zero or more repetitions of any digit from 0 to 9\ntext = text.lower() #everything to lowercase\ntext = re.sub(r'\\W^.?!',' ',text) # \\W --> Matches any character which is not a word character except (.?!)\ntext = re.sub(r'\\d',' ',text) # \\d --> Matches any decimal digit\ntext = re.sub(r'\\s+',' ',text) # \\s --> Matches any characters that are considered whitespace (Ex: [\\t\\n\\r\\f\\v].)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":560,"id":"00a2d5","input":"text[:100]","output":{"0":{"data":{"text/plain":"\" contemporary climate change includes both global warming and its impacts on earth's weather pattern\""},"exec_count":560,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":561,"id":"e33976","input":"'''\nYour code here: Tokenize the words from the data and set it to a variable called words.\nHint: how to this might be on the very home page of NLTK!\n'''\ntokens = nltk.word_tokenize(text)\n\nwords = tokens","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":562,"id":"a80e05","input":"print(words[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"['contemporary', 'climate', 'change', 'includes', 'both', 'global', 'warming', 'and', 'its', 'impacts']\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":563,"id":"425354","input":"'''\nYour code here: Tokenize the sentences from the data  and set it to a variable called sentences.\nHint: try googling how to tokenize sentences in NLTK!\n'''\nsentences = nltk.sent_tokenize(text)\n","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":564,"id":"7fc10e","input":"print(sentences[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"[\" contemporary climate change includes both global warming and its impacts on earth's weather patterns.\", 'there have been previous periods of climate change, but the current changes are distinctly more rapid and not due to natural causes.', 'instead, they are caused by the emission of greenhouse gases, mostly carbon dioxide (co ) and methane.', 'burning fossil fuels for energy production creates most of these emissions.', 'certain agricultural practices, industrial processes, and forest loss are additional sources.', \"greenhouse gases are transparent to sunlight, allowing it through to heat the earth's surface.\", \"when the earth emits that heat as infrared radiation the gases absorb it, trapping the heat near the earth's surface and causing global warming.\", 'due to climate change, deserts are expanding, while heat waves and wildfires are becoming more common.', 'increased warming in the arctic has contributed to melting permafrost, glacial retreat and sea ice loss.', 'higher temperatures are also causing more intense storms, droughts, and other weather extremes.']\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":565,"id":"915780","input":"nltk.download('stopwords')\nfrom nltk.corpus import stopwords","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package stopwords to /projects/aebc210b-e912-4\n[nltk_data]     df7-91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":566,"id":"ff5a5d","input":"'''\ndefine a function called \"remove_stopwords\" that takes in a list of the sentences of the text and returns one that doesn't have any stopwords.\n'''\n\n\ndef remove_stopwords(sentences):\n    stop_words = set(stopwords.words('english'))\n    ### Some code goes here. Hint: You may have to look up how to remove stopwords in NLTK if you get stuck. ###\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        words = [word for word in words if not word.lower() in stop_words]\n        sentences[i] = \" \".join(words)\n    return sentences\n\n###Then actually apply your function###\nsentences = remove_stopwords(sentences)\nprint(sentences[:10]) #Check if it worked correctly. Are all stopwords removed?","output":{"0":{"name":"stdout","output_type":"stream","text":"[\"contemporary climate change includes global warming impacts earth 's weather patterns .\", 'previous periods climate change , current changes distinctly rapid due natural causes .', 'instead , caused emission greenhouse gases , mostly carbon dioxide ( co ) methane .', 'burning fossil fuels energy production creates emissions .', 'certain agricultural practices , industrial processes , forest loss additional sources .', \"greenhouse gases transparent sunlight , allowing heat earth 's surface .\", \"earth emits heat infrared radiation gases absorb , trapping heat near earth 's surface causing global warming .\", 'due climate change , deserts expanding , heat waves wildfires becoming common .', 'increased warming arctic contributed melting permafrost , glacial retreat sea ice loss .', 'higher temperatures also causing intense storms , droughts , weather extremes .']\n"}},"pos":14,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":567,"id":"72cb0b","input":"'''\ndefine a function called \"remove_punctuation\" that removes punctuation from the sentences.\n'''\ndef remove_punctuation(sentences):\n    \n    ### Some code goes here. Hint: Try looking up how to remove stopwords in NLTK if you get stuck. ###\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        words = [word for word in words if word not in \",.?!()\"]\n        sentences[i] = ' '.join(words)\n    return sentences\nsentences = remove_punctuation(sentences)\nprint(sentences[:10]) #eliminating all punctuation.","output":{"0":{"name":"stdout","output_type":"stream","text":"[\"contemporary climate change includes global warming impacts earth 's weather patterns\", 'previous periods climate change current changes distinctly rapid due natural causes', 'instead caused emission greenhouse gases mostly carbon dioxide co methane', 'burning fossil fuels energy production creates emissions', 'certain agricultural practices industrial processes forest loss additional sources', \"greenhouse gases transparent sunlight allowing heat earth 's surface\", \"earth emits heat infrared radiation gases absorb trapping heat near earth 's surface causing global warming\", 'due climate change deserts expanding heat waves wildfires becoming common', 'increased warming arctic contributed melting permafrost glacial retreat sea ice loss', 'higher temperatures also causing intense storms droughts weather extremes']\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":568,"id":"36a03c","input":"from nltk.stem import PorterStemmer\n\nstemmer = PorterStemmer()\n# try each of the words below\nstemmer.stem('troubled')\n\nstemmer.stem('troubling')\nstemmer.stem('troubles')\nstemmer.stem('trouble')","output":{"0":{"data":{"text/plain":"'troubl'"},"exec_count":568,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":569,"id":"93c4f6","input":"'''\nYour code here:\nDefine a function called \"stem_sentences\" that takes in a list of sentences and returns a list of stemmed sentences.\n'''\n\ndef stem_sentences(sentences):\n    ### Some code goes here. Hint: Try looking up how to stem words in NLTK if you get stuck (or simply use the example above and run stemmer in a loop!). ###\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        for w in words:\n            words = stemmer.stem(w)\n            sentences[i] = \"\".join(words)\n    return sentences\nstemmed_sentences = stem_sentences(sentences)","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":570,"id":"4c3a3c","input":"\nprint(stemmed_sentences[:100])","output":{"0":{"name":"stdout","output_type":"stream","text":"['pattern', 'caus', 'methan', 'emiss', 'sourc', 'surfac', 'warm', 'common', 'loss', 'extrem', 'extinct', 'loss', 'result', 'centuri', 'centuri', 'ocean', 'current', '°c', 'warm', 'sheet', '``', 'reach', '°c', 'centuri', 'warm', 'emiss', 'sourc', 'use', 'facil', 'soil', 'impact', 'cool', 'climat', 'popularis', 'climat', 'senat', 'popular', 'chang', 'interchang', 'warm', '``', '``', 'warm', 'averag', '[', '–', '–', 'rise', 'temperatur', 'era', 'increas', 'centuri', 'core', 'around', 'region', 'region', 'maximum', 'rate', 'observ', 'humid', 'spring', 'space', 'rate', 'planet', 'temperatur', 'evapor', 'ocean', 'contin', 'hemispher', 'ice', 'heat', 'warm', 'world', 'climat', 'centuri', 'earth', 'sun', 'rule', 'chang', 'caus', 'atmospher', 'forc', 'effect', 'surfac', 'portion', 'time', 'absenc', 'feedback', 'forc', 'imbal', 'sinc', 'year', 'year', 'gase', 'electr', 'fertilis', 'extract', 'fertilis', 'emiss', 'process']\n"}},"pos":20,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":571,"id":"01f79a","input":"from nltk.stem import WordNetLemmatizer\n    \n## Step 1: Import the lemmatizer\nlemmatizer = WordNetLemmatizer()\n\nsentences = nltk.sent_tokenize(text)\nsentences = remove_stopwords(sentences)\nsentences = remove_punctuation(sentences)\n\n'''\nYour code here: Define a function called \"lem_sentences\" that: loops through the sentences, split the sentences up by words and applies \"lemmatizer.lemmatize\" to each word and then join everything back into a sentence\n'''\n##Similar to stopwords: For loop through the sentences, split by words and apply \"lemmatizer.lemmatize\" to each word and join back into a sentence\ndef lem_sentences(sentences):\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        for w in words:\n            words = lemmatizer.lemmatize(w)\n        sentences[i] = \"\".join(words)\n    return sentences\nsentences = lem_sentences(sentences)\nprint(sentences[:10]) ","output":{"0":{"name":"stdout","output_type":"stream","text":"['pattern', 'cause', 'methane', 'emission', 'source', 'surface', 'warming', 'common', 'loss', 'extreme']\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":572,"id":"8cdcc4","input":"print(sentences[:1000]) ","output":{"0":{"name":"stdout","output_type":"stream","text":"['pattern', 'cause', 'methane', 'emission', 'source', 'surface', 'warming', 'common', 'loss', 'extreme', 'extinct', 'loss', 'result', 'century', 'century', 'ocean', 'current', '°c', 'warming', 'sheet', '``', 'reach', '°c', 'century', 'warming', 'emission', 'source', 'use', 'facility', 'soil', 'impact', 'cooling', 'climate', 'popularised', 'climate', 'senate', 'popularity', 'change', 'interchangeably', 'warming', '``', '``', 'warming', 'average', '[', '–', '–', 'rising', 'temperature', 'era', 'increased', 'century', 'core', 'around', 'region', 'region', 'maximum', 'rate', 'observation', 'humidity', 'spring', 'space', 'rate', 'planet', 'temperature', 'evaporation', 'ocean', 'continent', 'hemisphere', 'ice', 'heat', 'warming', 'world', 'climate', 'century', 'earth', 'sun', 'ruled', 'change', 'cause', 'atmosphere', 'forcing', 'effect', 'surface', 'portion', 'time', 'absence', 'feedback', 'forcings', 'imbalance', 'since', 'year', 'year', 'gas', 'electricity', 'fertiliser', 'extraction', 'fertiliser', 'emission', 'process', 'water', 'cycle', 'scale', 'burning', 'much', 'radiation', 'budget', 'droplet', 'droplet', 'sunlight', 'forcing', 'warming', 'rise', 'warming', '°c', 'land', 'etc', 'warming', 'future', '%', 'emission', 'temperature', 'evaporation', 'sunlight', 'pattern', 'effect', 'albedo', 'activity', 'system', 'onwards', 'earth', 'stratosphere', 'warm', 'era', 'year', 'long', 'trend', 'emission', 'feedback', 'cloud', 'temperature', 'growth', 'emission', 'moisture', 'atmosphere', 'planet', 'planet', 'uncertainty', 'surface', 'change', 'atmosphere', 'system', 'positive', 'ocean', 'growth', 'future', 'heat', 'carbon', 'emission', 'system', 'feedback', 'forcing', 'atmosphere', 'climate', 'increase', 'observation', '``', 'model', 'climate', 'emission', 'future', 'ppm', 'reach', '°c', 'scenario', 'reach', '°c', '°c', '°c', 'scenario', 'observation', 'gas', 'kept', 'emission', 'budget', 'wetland', 'century', 'weather', 'rapidly', 'observation', 'frequency', 'asia', 'increasing', 'change', 'circulation', 'expansion', 'averaging', '±', 'year', 'cm', 'emission', 'ice', 'rare', '°c', 'chemistry', 'acidify', 'water', 'expanding', 'reduced', 'rise', 'warming', 'amoc', 'reef', 'acidification', 'emission', 'lifetime', 'year', 'year', 'rise', 'celsius', 'year', 'altitude', 'greening', 'region', 'unclear', 'subtropics', 'likely', 'specie', 'land', 'seabird', 'reef', 'life', 'stress', 'impact', 'collapse', 'worldwide', 'weather', 'australia', 'warming', 'gas', 'destruction', 'arctic', 'propagation', 'forest', 'worldwide', 'precipitation', 'risk', 'ecosystem', 'country', 'century', 'undernutrition', 'malaria', 'shortage', 'heat', 'year', 'undernutrition', 'quality', 'security', 'soybean', 'crop', 'negative', 'impact', 'population', 'fished', 'change', 'consequence', 'continue', 'asia', 'poverty', 'change', 'resource', 'change', 'capability', 'common', 'sea', 'tuvalu', 'adapt', 'sahara', 'country', 'resource', 'resource', 'migration', 'population', 'mali', 'change', 'agriculture', 'u', 'flooding', 'region', 'italy', 'intensification', 'rainfall', 'intensification', 'common', 'atmosphere', 'le', 'target', 'industry', '°c', 'meet', 'goal', 'reaching', ':', '–', 'century', 'warming', 'reduction', 'reforestation', 'risk', 'warming', 'century', 'impact', 'emission', 'understood', 'change', 'energy', 'energy', 'year', 'location', 'wind', 'supply', 'comparison', 'scenario', 'phased', 'transport', 'vehicle', 'emission', 'pump', 'renewables', 'project', 'variability', 'low', 'output', 'security', 'accident', 'concern', 'change', 'annually', 'warming', 'poverty', 'emission', 'development', 'development', 'energy', 'uncertain', 'sector', 'vehicle', 'lifetime', 'retrofitting', 'efficiency', 'demand', 'level', 'production', 'diet', 'use', 'degradation', 'emission', 'chemistry', 'level', 'concern', 'amendment', 'carbon', 'ecosystem', 'atmosphere', 'mid-century', 'atmosphere', 'warming', '°c', 'goal', '``', 'impact', 'expensive', 'le', 'slow', 'policy', 'finance', 'protection', 'needed', 'impact', 'everybody', 'climate', 'income', 'vulnerability', 'intervention', 'condition', 'climate', 'adapt', 'adaptation', 'exposure', 'risk', 'impact', 'mitigation', 'benefit', 'demand', 'construction', 'exposure', 'mitigation', 'emission', 'fairness', 'development', 'inequality', '``', 'mitigation', 'complex', 'economy', 'challenged', 'region', 'sell', 'emission', 'emission', 'system', '$', 'priced', 'death', 'instead', 'industry', 'production', 'inequality', 'adapt', 'lost', 'job', 'investment', 'unfccc', 'system', 'sustained', 'protocol', 'signed', 'negotiation', 'emission', 'atmosphere', 'need', '°c', 'fund', 'funding', 'well', 'warming', '°c', 'protocol', 'agreement', 'binding', 'year', 'supported', 'agreement', 'designed', 'gas', 'change', 'emergency', 'suit', '``', 'carbon-neutral', 'china', 'vehicle', 'country', 'emission', 'warming', 'respectively', 'activity', '%', 'view', 'change', 'emission', 'peer-reviewed', 'report', 'human', 'australia', 'scientist', 'result', 'misnomer', 'change', 'change', 'scientist', 'change', 'depletion', 'change', 'change', 'threat', 'concerned', 'country', 'emergency', 'change', 'change', 'activity', 'climate', 'thunberg', 'transport', 'company', 'change', 'damage', 'explain', 'heat', 'planet', 'dioxide', 'heat', 'atmosphere', 'age', 'process', 'loop', 'age', '°c', 'difference', 'self-regulating', 'objection', 'spectrum', 'warming', 'increase', '``', 'testimony', 'research', 'warming', 'report']\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":573,"id":"0e887b","input":"nltk.download('averaged_perceptron_tagger')","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package averaged_perceptron_tagger to /project\n[nltk_data]     s/aebc210b-e912-4df7-91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":573,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":574,"id":"7114bf","input":"# POS Tagging example\n# CC - coordinating conjunction\n# NN - noun, singular (cat, tree)\n\n ###If we want to look at part of speech taking before we stem/lem\nall_words = nltk.word_tokenize(text) \ntagged_words = nltk.pos_tag(all_words)\n\n##Creates a list of lists where each element of the list is [word,partofspeech abbreviation]\n\n# Tagged word paragraph\nword_tags = []\nfor tw in tagged_words:\n    word_tags.append(tw[0]+\"_\"+tw[1])\n\ntagged_paragraph = ' '.join(word_tags)\n\n'''\nYour code here: print the first 1000 characters of tagged_paragraph.\n'''\nprint(tagged_paragraph[:1000])\n\nwords = nltk.pos_tag(sentences)\n\nstem_and_tag = []\nfor tw in words:\n    stem_and_tag.append(tw[0]+\"_\"+tw[1])\ntag_stem_p = \" \".join(stem_and_tag)\n\nprint(tag_stem_p[:1000])","output":{"0":{"name":"stdout","output_type":"stream","text":"contemporary_JJ climate_NN change_NN includes_VBZ both_DT global_JJ warming_NN and_CC its_PRP$ impacts_NNS on_IN earth_NN 's_POS weather_NN patterns_NNS ._. there_EX have_VBP been_VBN previous_JJ periods_NNS of_IN climate_NN change_NN ,_, but_CC the_DT current_JJ changes_NNS are_VBP distinctly_RB more_RBR rapid_JJ and_CC not_RB due_JJ to_TO natural_JJ causes_NNS ._. instead_RB ,_, they_PRP are_VBP caused_VBN by_IN the_DT emission_NN of_IN greenhouse_NN gases_NNS ,_, mostly_RB carbon_NN dioxide_NN (_( co_NN )_) and_CC methane_NN ._. burning_VBG fossil_JJ fuels_NNS for_IN energy_NN production_NN creates_VBZ most_JJS of_IN these_DT emissions_NNS ._. certain_JJ agricultural_JJ practices_NNS ,_, industrial_JJ processes_NNS ,_, and_CC forest_JJS loss_NN are_VBP additional_JJ sources_NNS ._. greenhouse_NN gases_NNS are_VBP transparent_JJ to_TO sunlight_VB ,_, allowing_VBG it_PRP through_IN to_TO heat_VB the_DT earth_NN 's_POS surface_NN ._. when_WRB the_DT earth_NN emits_VBZ that_DT heat_NN a\npattern_NN cause_NN methane_NN emission_NN source_NN surface_NN warming_VBG common_JJ loss_NN extreme_JJ extinct_JJ loss_NN result_NN century_NN century_NN ocean_JJ current_JJ °c_NN warming_VBG sheet_NN ``_`` reach_NN °c_JJ century_NN warming_VBG emission_NN source_NN use_NN facility_NN soil_NN impact_NN cooling_VBG climate_NN popularised_VBD climate_NN senate_NN popularity_NN change_NN interchangeably_RB warming_VBG ``_`` ``_`` warming_JJ average_JJ [_JJ –_NN –_NNP rising_VBG temperature_NN era_NN increased_JJ century_NN core_NN around_IN region_NN region_NN maximum_NN rate_NN observation_NN humidity_NN spring_NN space_NN rate_NN planet_NN temperature_NN evaporation_NN ocean_JJ continent_NN hemisphere_NN ice_NN heat_NN warming_VBG world_NN climate_JJ century_NN earth_NN sun_NN ruled_VBD change_NN cause_NN atmosphere_NN forcing_VBG effect_NN surface_NN portion_NN time_NN absence_NN feedback_NN forcings_NNS imbalance_NN since_IN year_NN year_NN gas_NN electricity_NN fertiliser_NN extrac\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":575,"id":"a5c2ba","input":"# Install gensim - pip install gensim\nimport nltk\nfrom gensim.models import Word2Vec\nimport matplotlib.pyplot as plt\nnltk.download('punkt')\nfrom wordcloud import WordCloud","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package punkt to /projects/aebc210b-e912-4df7-\n[nltk_data]     91ea-37e0f8451ece/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":576,"id":"d3208a","input":"#Let's go ahead and create a list that's formatted how word2vec needs:\n    # a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence (after preprocessing)\ntokenized = [nltk.word_tokenize(sentence) for sentence in sentences]\n","output":{"0":{"ename":"IndentationError","evalue":"unexpected indent (3278709712.py, line 3)","output_type":"error","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [576]\u001b[0;36m\u001b[0m\n\u001b[0;31m    for i in range(len(sentences)):\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"0b5fb4","input":"## NLP Part 1 - Tokenization of paragraphs/sentences\n\nIn this section we are going to tokenize our sentences and words. If you aren't familiar with tokenization, we recommend looking up \"what is tokenization\". \n\nYou should also spend time on the [NLTK documentation](https://www.nltk.org/). If you're not sure how to do something, or get an error, it is best to google it first and ask questions as you go!\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"3db016","input":"## Testing our model","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"48d754","input":"## Training the Word2Vec model\n\nFor this part you may want to follow a guide [here](https://radimrehurek.com/gensim/models/word2vec.html). ","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"4e454e","input":"### Why did we do all this work?","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"5fca86","input":"## NLP Part 0 - Get some Data!\n\nThis section's code is mostly given to you as a review for how you can scrape and manipulate data from the web. \n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"678245","input":"## Reflection\n\nHow important do you think proper preprocessing in NLP is?\n\n","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"84a0ec","input":"# Word2Vec Model Visualization\n\n","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"ad6205","input":"## NLP Part 2 - Stopwords and Punctuation\nNow we are going to work to remove stopwords and punctuation from our data. Why do you think we are going to do this? Do some research if you don't know yet. ","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"b21780","input":"","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"ba337f","input":"## NLP Part 4 - POS Tagging\nParts of speech tagging is marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context.","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"bc5340","input":"","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"d13de2","input":"## NLP Part 3b - Lemmatization\n\nLemmatization considers the context and converts the word to its meaningful base form. There is a cool tutorial and definition of lemmatization in NLTK [here](https://www.geeksforgeeks.org/python-lemmatization-with-nltk/).\n\n","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"e14ead","input":"# Natural Language Processing using NLTK","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"fe7627","input":"## NLP Part 3a - Stemming the words\nStemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form. There is an example below!","pos":17,"type":"cell"}
{"id":0,"time":1659470775723,"type":"user"}
{"last_load":1659470771980,"type":"file"}